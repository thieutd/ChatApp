generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model direct_chat {
  id                              Int       @id
  user1_id                        Int
  user2_id                        Int
  created_at                      DateTime? @default(now()) @db.Timestamp(6)
  room                            room      @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_direct_chat_user1_idTouser user      @relation("direct_chat_user1_idTouser", fields: [user1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_direct_chat_user2_idTouser user      @relation("direct_chat_user2_idTouser", fields: [user2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user1_id, user2_id])
}

model media_attachment {
  id         Int        @id @default(autoincrement())
  message_id Int
  media_type media_type
  file_name  String     @db.VarChar(255)
  file_size  BigInt
  url        String     @db.VarChar(1024)
  mime_type  String     @db.VarChar(127)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  message    message    @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model message {
  id                                 Int                    @id @default(autoincrement())
  user_id                            Int
  room_id                            Int
  content                            String?
  created_at                         DateTime?              @default(now()) @db.Timestamp(6)
  deleted_at                         DateTime?              @db.Timestamp(6)
  media_attachment                   media_attachment[]
  room_message_room_idToroom         room                   @relation("message_room_idToroom", fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                               user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  message_reaction                   message_reaction[]
  message_read_receipt               message_read_receipt[]
  pinned_message                     pinned_message[]
  room_room_last_message_idTomessage room[]                 @relation("room_last_message_idTomessage")

  @@index([room_id, created_at(sort: Desc)], map: "idx_message_room")
  @@index([user_id], map: "idx_message_user")
}

model message_reaction {
  id         Int       @id @default(autoincrement())
  message_id Int
  user_id    Int
  emoji      String    @db.VarChar(10)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  message    message   @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([message_id, user_id, emoji])
}

model message_read_receipt {
  user_id    Int
  message_id Int
  read_at    DateTime? @default(now()) @db.Timestamp(6)
  message    message   @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, message_id])
}

model notification {
  id         Int       @id @default(autoincrement())
  user_id    Int
  event_type String    @db.VarChar(50)
  event_data Json
  is_read    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pinned_message {
  id         Int       @id @default(autoincrement())
  room_id    Int
  message_id Int
  user_id    Int
  pinned_at  DateTime? @default(now()) @db.Timestamp(6)
  message    message   @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room       room      @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model room {
  id                                    Int               @id @default(autoincrement())
  name                                  String            @db.VarChar(255)
  type                                  room_type
  description                           String?           @default("")
  avatar_url                            String?           @db.VarChar(1024)
  created_at                            DateTime?         @default(now()) @db.Timestamp(6)
  deleted_at                            DateTime?         @db.Timestamp(6)
  last_message_id                       Int?
  direct_chat                           direct_chat?
  message_message_room_idToroom         message[]         @relation("message_room_idToroom")
  pinned_message                        pinned_message[]
  message_room_last_message_idTomessage message?          @relation("room_last_message_idTomessage", fields: [last_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_room_last_message")
  room_membership                       room_membership[]

  @@index([name], map: "idx_room_name")
}

model room_membership {
  user_id    Int
  room_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  role       room_role @default(member)
  deleted_at DateTime? @db.Date
  room       room      @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, room_id])
  @@index([user_id], map: "idx_room_membership_user")
}

model user {
  id                                     Int                    @id @default(autoincrement())
  username                               String                 @unique @db.VarChar(255)
  password                               String                 @db.VarChar(255)
  role                                   user_role              @default(user)
  avatar_url                             String?                @db.VarChar(1024)
  created_at                             DateTime?              @default(now()) @db.Timestamp(6)
  deleted_at                             DateTime?              @db.Timestamp(6)
  direct_chat_direct_chat_user1_idTouser direct_chat[]          @relation("direct_chat_user1_idTouser")
  direct_chat_direct_chat_user2_idTouser direct_chat[]          @relation("direct_chat_user2_idTouser")
  message                                message[]
  message_reaction                       message_reaction[]
  message_read_receipt                   message_read_receipt[]
  notification                           notification[]
  pinned_message                         pinned_message[]
  room_membership                        room_membership[]

  @@index([username], map: "idx_user_username")
}

enum media_type {
  image
  video
  audio
  document
}

enum room_role {
  admin
  member
}

enum room_type {
  direct
  group
}

enum user_role {
  admin
  user
}
